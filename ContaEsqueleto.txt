using System;
using System.Collections.Generic;

namespace SistemaBancario
{
    class App
    {
        static void Main(string[] args)
        {
            // Cadastro inicial de Clientes

            bool cadastrarProximoCliente = true;

            while (cadastrarProximoCliente)

                cadastrarProximoCliente = ContaBancaria.CadastrarNovaConta();

            // Menu de operações

            while (true)
            {
                Console.WriteLine("\n1 - Abrir Conta Bancaria");

                Console.WriteLine("2 - Depositar");

                Console.WriteLine("3 - Sacar");

                Console.WriteLine("4 - Consultar Saldo");

                Console.WriteLine("5 - Transferir");

                Console.WriteLine("S - Sair");

                Console.Write("Selecione a ação: ");

                string opcao = Console.ReadLine().ToUpper();

                if (opcao == "S")

                    break;

                switch (opcao)
                {

                    case "1":

                        ContaBancaria.CadastrarNovaConta();

                        break;

                    case "2":

                        ContaBancaria.ListarClientes();

                        break;

                    case "3":

                        ContaBancaria.Sacar();

                        break;

                    case "4":

                        ContaBancaria.ConsultarSaldo();

                        break;

                    case "5":

                        ContaBancaria.Transferir();

                        break;

                    default:

                        Console.WriteLine("\nOpção inválida.");

                        break;

                }

            }

            Console.WriteLine("\nEncerrando a biblioteca...");

        }

    }

    class Banco

    {

        static Dictionary<int, string> Cpfs = new Dictionary<int, string>();

        static Dictionary<int, string> Nomes = new Dictionary<int, string>();

        static Dictionary<int, string> Tipos = new Dictionary<int, string>();

        static Dictionary<int, int> Saldos = new Dictionary<int, int>();


        public static void Cadastrar(int id, string Cpf, string Nome, int Saldo, string Tipo)

        {

            Cpfs.Add(id, Cpf);

            Nomes.Add(id, Nome);

            Tipos.Add(id, Tipo);

            Saldos.Add(id, Saldo);

        }

        public static int ObterQuantidadeCpfsUnicosCadastradas()

        {

            return Cpfs.Count;

        }

        public static bool Cadastrada(int id)

        {

            return Cpfs.ContainsKey(id);

        }

        public static string ObterCpfs(int id)

        {

            return Cpfs[id];

        }

        public static List<int> ObterIdsCpfsCadastradas()

        {

            return new List<int>(Cpfs.Keys);

        }

        public static string ObterNomeCliente(int id)

        {

            return Nomes[id];

        }

        public static int ObterSaldo(int id)

        {

            return Saldos[id];

        }

    }

    class Cliente

    {

        static Dictionary<int, string> Nomes = new Dictionary<int, string>();

        public static void Cadastrar(int id, string nome)

        {

            Nomes.Add(id, nome);

        }

        public static int ObterQuantidadeClientesCadastrados()

        {

            return Nomes.Count;

        }

        public static bool Cadastrado(int id)

        {

            return Nomes.ContainsKey(id);

        }

        public static string ObterNome(int id)

        {

            return Nomes[id];

        }

        public static List<int> ObterIdsClientesCadastrados()

        {

            return new List<int>(Nomes.Keys);

        }

    }

    class ContaBancaria
    {
        static int IdConta = 1;

        static int IdNome = 1;

        public static bool CadastrarNovaConta()

        {
            Console.WriteLine($"\nDigite o seu Cpf {IdNome} (ou 'S' para sair do cadastro de clientes):");

            string inputNome = Console.ReadLine();

            if (inputNome.ToUpper() == "S")

                return false;

            Console.WriteLine($"Digite o seu Cpf '{inputNome}': ");

            string inputCpf = Console.ReadLine();

            Console.WriteLine($"Digite qual conta você quer abrir '{inputNome}': ");


            Console.WriteLine($"Digite a quantidade inicial do seu saldo '{inputNome}':");

            string inputSaldo = Console.ReadLine();

            if (!int.TryParse(inputSaldo, out int saldo))

                saldo = 0; // valor padrão caso não seja informada uma quantidade válida

            Banco.Cadastrar(IdNome, inputNome, inputCpf, saldo);

            IdNome++;

            return true;
        }

        public static void ListarClientes()

        {
            Console.WriteLine("\nLista de obras:");

            var ids = Banco.ObterIdsCpfsCadastradas();

            for (int i = 0; i < ids.Count; i++)

            {

                int id = ids[i];

                Console.WriteLine($"Nome: ({id}) {Cliente.ObterNome(id)} - Cpf: {Banco.ObterNomeCliente(id)} - Saldo: {Banco.ObterSaldo(id):C}");

            }
        }
    }
}
