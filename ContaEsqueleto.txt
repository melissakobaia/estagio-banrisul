using System;
using System.Collections.Generic;

namespace SistemaBancario
{
    class Program
    {
        static void Main(string[] args)
        {
            Banco banco = new Banco();

            while (true)
            {
                Console.WriteLine("\n===== MENU DO BANCO =====");
                Console.WriteLine("1 - Cadastrar Cliente");
                Console.WriteLine("2 - Abrir Conta Bancária");
                Console.WriteLine("3 - Listar Clientes e Contas");
                Console.WriteLine("4 - Depositar");
                Console.WriteLine("5 - Sacar");
                Console.WriteLine("6 - Transferir");
                Console.WriteLine("7 - Consultar Saldo");
                Console.WriteLine("S - Sair");
                Console.Write("Escolha uma opção: ");
                string opcao = Console.ReadLine().ToUpper();

                if (opcao == "S")
                {
                    Console.WriteLine("\nEncerrando o sistema...");
                    break;
                }

                switch (opcao)
                {
                    case "1":
                        banco.CadastrarCliente();
                        break;
                    case "2":
                        banco.AbrirConta();
                        break;
                    case "3":
                        banco.ListarClientesEContas();
                        break;
                    case "4":
                        banco.Depositar();
                        break;
                    case "5":
                        banco.Sacar();
                        break;
                    case "6":
                        banco.Transferir();
                        break;
                    case "7":
                        banco.ConsultarSaldo();
                        break;
                    default:
                        Console.WriteLine("Opção inválida!");
                        break;
                }
            }
        }
    }

    class Banco
    {
        private List<Cliente> clientes = new List<Cliente>();
        private int proximoNumeroConta = 1;

        public void CadastrarCliente()
        {
            Console.Write("\nNome do cliente: ");
            string nome = Console.ReadLine();
            Console.Write("CPF: ");
            string cpf = Console.ReadLine();

            if (clientes.Exists(c => c.CPF == cpf))
            {
                Console.WriteLine("Já existe um cliente com este CPF.");
                return;
            }

            clientes.Add(new Cliente(nome, cpf));
            Console.WriteLine($"Cliente {nome} cadastrado com sucesso!");
        }

        public void AbrirConta()
        {
            Console.Write("\nCPF do cliente: ");
            string cpf = Console.ReadLine();
            Cliente cliente = clientes.Find(c => c.CPF == cpf);

            if (cliente == null)
            {
                Console.WriteLine("Cliente não encontrado!");
                return;
            }

            Console.Write("Tipo da conta (Corrente/Poupança): ");
            string tipo = Console.ReadLine();

            if (tipo.ToLower() != "corrente" && tipo.ToLower() != "poupança")
            {
                Console.WriteLine("Tipo inválido. A conta deve ser 'Corrente' ou 'Poupança'.");
                return;
            }

            Console.Write("Saldo inicial: ");
            if (!decimal.TryParse(Console.ReadLine(), out decimal saldoInicial) || saldoInicial < 0)
            {
                Console.WriteLine("Valor inválido.");
                return;
            }

            ContaBancaria conta = new ContaBancaria(proximoNumeroConta++, tipo, saldoInicial);
            cliente.AdicionarConta(conta);

            Console.WriteLine($"Conta {conta.Numero} ({tipo}) criada para {cliente.Nome} com saldo de R$ {saldoInicial:F2}");
        }

        public void ListarClientesEContas()
        {
            Console.WriteLine("\n===== CLIENTES E CONTAS =====");
            foreach (var cliente in clientes)
            {
                Console.WriteLine($"\nCliente: {cliente.Nome} (CPF: {cliente.CPF})");
                if (cliente.Contas.Count == 0)
                    Console.WriteLine("  Nenhuma conta cadastrada.");
                else
                {
                    foreach (var conta in cliente.Contas)
                    {
                        Console.WriteLine($"  Conta {conta.Numero} - Tipo: {conta.Tipo} - Saldo: R$ {conta.Saldo:F2}");
                    }
                }
            }
        }

        public void Depositar()
        {
            ContaBancaria conta = BuscarConta();
            if (conta == null) return;

            Console.Write("Valor do depósito: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal valor) && valor > 0)
            {
                conta.Depositar(valor);
                Console.WriteLine($"Depósito de R$ {valor:F2} realizado com sucesso.");
            }
            else
                Console.WriteLine("Valor inválido.");
        }

        public void Sacar()
        {
            ContaBancaria conta = BuscarConta();
            if (conta == null) return;

            Console.Write("Valor do saque: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal valor) && valor > 0)
            {
                if (conta.Sacar(valor))
                    Console.WriteLine($"Saque de R$ {valor:F2} realizado com sucesso.");
                else
                    Console.WriteLine("Saldo insuficiente!");
            }
            else
                Console.WriteLine("Valor inválido.");
        }

        public void Transferir()
        {
            Console.WriteLine("\n--- Conta de origem ---");
            ContaBancaria origem = BuscarConta();
            if (origem == null) return;

            Console.WriteLine("\n--- Conta de destino ---");
            ContaBancaria destino = BuscarConta();
            if (destino == null) return;

            Console.Write("Valor da transferência: ");
            if (decimal.TryParse(Console.ReadLine(), out decimal valor) && valor > 0)
            {
                if (origem.Transferir(destino, valor))
                    Console.WriteLine($"Transferência de R$ {valor:F2} realizada com sucesso.");
                else
                    Console.WriteLine("Saldo insuficiente!");
            }
            else
                Console.WriteLine("Valor inválido.");
        }

        public void ConsultarSaldo()
        {
            ContaBancaria conta = BuscarConta();
            if (conta != null)
                Console.WriteLine($"Saldo da conta {conta.Numero}: R$ {conta.Saldo:F2}");
        }

        private ContaBancaria BuscarConta()
        {
            Console.Write("CPF do cliente: ");
            string cpf = Console.ReadLine();
            Cliente cliente = clientes.Find(c => c.CPF == cpf);

            if (cliente == null)
            {
                Console.WriteLine("Cliente não encontrado!");
                return null;
            }

            if (cliente.Contas.Count == 0)
            {
                Console.WriteLine("Este cliente não possui contas.");
                return null;
            }

            Console.WriteLine("Contas disponíveis:");
            foreach (var conta in cliente.Contas)
                Console.WriteLine($"  Conta {conta.Numero} - Tipo: {conta.Tipo} - Saldo: R$ {conta.Saldo:F2}");

            Console.Write("Número da conta: ");
            if (int.TryParse(Console.ReadLine(), out int numeroConta))
                return cliente.Contas.Find(c => c.Numero == numeroConta);

            Console.WriteLine("Conta inválida!");
            return null;
        }
    }

    class Cliente
    {
        public string Nome { get; private set; }
        public string CPF { get; private set; }
        public List<ContaBancaria> Contas { get; private set; }

        public Cliente(string nome, string cpf)
        {
            Nome = nome;
            CPF = cpf;
            Contas = new List<ContaBancaria>();
        }

        public void AdicionarConta(ContaBancaria conta)
        {
            Contas.Add(conta);
        }
    }

    class ContaBancaria
    {
        public int Numero { get; private set; }
        public string Tipo { get; private set; }
        public decimal Saldo { get; private set; }

        public ContaBancaria(int numero, string tipo, decimal saldoInicial)
        {
            Numero = numero;
            Tipo = tipo;
            Saldo = saldoInicial;
        }

        public void Depositar(decimal valor)
        {
            if (valor > 0)
                Saldo += valor;
        }

        public bool Sacar(decimal valor)
        {
            if (valor <= Saldo && valor > 0)
            {
                Saldo -= valor;
                return true;
            }
            return false;
        }

        public bool Transferir(ContaBancaria destino, decimal valor)
        {
            if (Sacar(valor))
            {
                destino.Depositar(valor);
                return true;
            }
            return false;
        }
    }
}
